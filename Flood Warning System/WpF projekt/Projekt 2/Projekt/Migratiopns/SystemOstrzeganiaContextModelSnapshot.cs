// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.Models;

namespace Projekt.Migratiopns
{
    [DbContext(typeof(SystemOstrzeganiaContext))]
    partial class SystemOstrzeganiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Polish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Projekt.Models.DataPomiaru", b =>
                {
                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Dzień")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Miesiąc")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Rok")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Data")
                        .HasName("PK__DataPomi__77387D0A9DE95860");

                    b.HasIndex("NazwaRzeki");

                    b.ToTable("DataPomiaru", "dane");
                });

            modelBuilder.Entity("Projekt.Models.DataPomiaruZstacji", b =>
                {
                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Dzień")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("IdStacji")
                        .HasColumnType("int")
                        .HasColumnName("id_stacji");

                    b.Property<string>("Miesiąc")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Rok")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Data")
                        .HasName("PK__DataPomi__77387D0AD5FE7994");

                    b.HasIndex("IdStacji");

                    b.ToTable("DataPomiaruZStacji", "dane");
                });

            modelBuilder.Entity("Projekt.Models.DataPowodziHi", b =>
                {
                    b.Property<DateTime>("DataPowodzi")
                        .HasColumnType("date");

                    b.Property<string>("Dzień")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Miejscowość")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miesiąc")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Rok")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("DataPowodzi")
                        .HasName("PK__DataPowo__E93B82BA9832E658");

                    b.HasIndex("Miejscowość");

                    b.ToTable("DataPowodziHis", "dane");
                });

            modelBuilder.Entity("Projekt.Models.DataPrognozy", b =>
                {
                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Dzień")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miesiąc")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Rok")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Data")
                        .HasName("PK__DataProg__77387D0A5BABE65A");

                    b.HasIndex("Miasto");

                    b.ToTable("DataPrognozy", "dane");
                });

            modelBuilder.Entity("Projekt.Models.ImgwdaneSynoptyczne", b =>
                {
                    b.Property<int>("IdStacji")
                        .HasColumnType("int")
                        .HasColumnName("id_stacji");

                    b.Property<string>("Stacja")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("stacja");

                    b.Property<double>("SumaOpadu")
                        .HasColumnType("float")
                        .HasColumnName("suma_opadu");

                    b.HasKey("IdStacji")
                        .HasName("PK__IMGWDane__46736E00A5A8752C");

                    b.ToTable("IMGWDaneSynoptyczne", "dane");
                });

            modelBuilder.Entity("Projekt.Models.ObszarZagrozony", b =>
                {
                    b.Property<string>("Miejscowosc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Miejscowosc")
                        .HasName("PK__ObszarZa__726D9DB7951D029F");

                    b.HasIndex("NazwaRzeki");

                    b.ToTable("ObszarZagrozony", "dane");
                });

            modelBuilder.Entity("Projekt.Models.ObszaryZalewowe", b =>
                {
                    b.Property<string>("NazwaRzeki")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("NazwaRzeki")
                        .HasName("PK__ObszaryZ__D7B57E02222793B7");

                    b.ToTable("ObszaryZalewowe", "dane");
                });

            modelBuilder.Entity("Projekt.Models.OstrzeganieInstytucji", b =>
                {
                    b.Property<string>("MiastoOrganizacji")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiejscowoscOrganizacji")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiejscowoscZagrozona")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaSluzby")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StanZagrozenia")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasIndex("MiejscowoscZagrozona");

                    b.ToTable("OstrzeganieInstytucji", "dane");
                });

            modelBuilder.Entity("Projekt.Models.PomiarMiejscowosc", b =>
                {
                    b.Property<DateTime>("DataPomiaru")
                        .HasColumnType("date");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("PoziomWody")
                        .HasColumnType("float");

                    b.Property<string>("SluzbaRatunkowa")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<double>("StandardowyPoziom")
                        .HasColumnType("float");

                    b.ToView("PomiarMiejscowosc");
                });

            modelBuilder.Entity("Projekt.Models.PomiarRzeki", b =>
                {
                    b.Property<string>("NazwaRzeki")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("PoziomWody")
                        .HasColumnType("float");

                    b.Property<double>("StandardowyPoziom")
                        .HasColumnType("float");

                    b.HasKey("NazwaRzeki")
                        .HasName("PK__PomiarRz__D7B57E020A039002");

                    b.ToTable("PomiarRzeki", "dane");
                });

            modelBuilder.Entity("Projekt.Models.PomiarRzekiDlaMiejscowosci", b =>
                {
                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("PoziomWody")
                        .HasColumnType("float");

                    b.Property<double>("StandardowyPoziom")
                        .HasColumnType("float");

                    b.ToView("PomiarRzekiDlaMiejscowosci");
                });

            modelBuilder.Entity("Projekt.Models.PowiadomienieSm", b =>
                {
                    b.Property<string>("NumerTelefonu")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StanZagrozenia")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("NumerTelefonu")
                        .HasName("PK__Powiadom__6C70F0C2239BCF5F");

                    b.HasIndex("Miejscowosc");

                    b.ToTable("PowiadomienieSMS", "dane");
                });

            modelBuilder.Entity("Projekt.Models.PowodzieHistoryczne", b =>
                {
                    b.Property<string>("Miejscowosc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Miejscowosc")
                        .HasName("PK__Powodzie__A551532136C135D3");

                    b.ToTable("PowodzieHistoryczne", "dane");
                });

            modelBuilder.Entity("Projekt.Models.PrognozaPogody", b =>
                {
                    b.Property<string>("Miasto")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Deszcz")
                        .HasColumnType("bit");

                    b.Property<double?>("IloscOpadow")
                        .HasColumnType("float");

                    b.HasKey("Miasto")
                        .HasName("PK__Prognoza__5B08C15F6681C165");

                    b.ToTable("PrognozaPogody", "dane");
                });

            modelBuilder.Entity("Projekt.Models.RodzajSłużbyRatunkowej", b =>
                {
                    b.Property<string>("Miejscowość")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PogRatunkowe")
                        .HasColumnType("bit")
                        .HasColumnName("Pog_ratunkowe");

                    b.Property<bool>("Policja")
                        .HasColumnType("bit");

                    b.Property<bool>("StrażPożarna")
                        .HasColumnType("bit")
                        .HasColumnName("Straż_pożarna");

                    b.HasIndex("Miejscowość");

                    b.ToTable("RodzajSłużbyRatunkowej", "dane");
                });

            modelBuilder.Entity("Projekt.Models.SprawdzCzyByłaPowódz", b =>
                {
                    b.Property<DateTime>("DataPowodzi")
                        .HasColumnType("date");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToView("SprawdzCzyByłaPowódz");
                });

            modelBuilder.Entity("Projekt.Models.SprawdzCzyZalewowy", b =>
                {
                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NazwaRzeki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToView("SprawdzCzyZalewowy", "dane");
                });

            modelBuilder.Entity("Projekt.Models.SprawdzPrognozeDlaMiastum", b =>
                {
                    b.Property<bool>("Deszcz")
                        .HasColumnType("bit");

                    b.Property<double?>("IloscOpadow")
                        .HasColumnType("float");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToView("SprawdzPrognozeDlaMiasta");
                });

            modelBuilder.Entity("Projekt.Models.DataPomiaru", b =>
                {
                    b.HasOne("Projekt.Models.PomiarRzeki", "NazwaRzekiNavigation")
                        .WithMany("DataPomiarus")
                        .HasForeignKey("NazwaRzeki")
                        .HasConstraintName("NazwaRzekiPomiaru")
                        .IsRequired();

                    b.Navigation("NazwaRzekiNavigation");
                });

            modelBuilder.Entity("Projekt.Models.DataPomiaruZstacji", b =>
                {
                    b.HasOne("Projekt.Models.ImgwdaneSynoptyczne", "IdStacjiNavigation")
                        .WithMany("DataPomiaruZstacjis")
                        .HasForeignKey("IdStacji")
                        .HasConstraintName("id_stacji")
                        .IsRequired();

                    b.Navigation("IdStacjiNavigation");
                });

            modelBuilder.Entity("Projekt.Models.DataPowodziHi", b =>
                {
                    b.HasOne("Projekt.Models.PowodzieHistoryczne", "MiejscowośćNavigation")
                        .WithMany("DataPowodziHis")
                        .HasForeignKey("Miejscowość")
                        .HasConstraintName("Miejscowość")
                        .IsRequired();

                    b.Navigation("MiejscowośćNavigation");
                });

            modelBuilder.Entity("Projekt.Models.DataPrognozy", b =>
                {
                    b.HasOne("Projekt.Models.PrognozaPogody", "MiastoNavigation")
                        .WithMany("DataPrognozies")
                        .HasForeignKey("Miasto")
                        .HasConstraintName("Miasto")
                        .IsRequired();

                    b.Navigation("MiastoNavigation");
                });

            modelBuilder.Entity("Projekt.Models.ObszarZagrozony", b =>
                {
                    b.HasOne("Projekt.Models.PomiarRzeki", "NazwaRzekiNavigation")
                        .WithMany("ObszarZagrozonies")
                        .HasForeignKey("NazwaRzeki")
                        .HasConstraintName("NazwaRzeki")
                        .IsRequired();

                    b.Navigation("NazwaRzekiNavigation");
                });

            modelBuilder.Entity("Projekt.Models.OstrzeganieInstytucji", b =>
                {
                    b.HasOne("Projekt.Models.ObszarZagrozony", "MiejscowoscZagrozonaNavigation")
                        .WithMany()
                        .HasForeignKey("MiejscowoscZagrozona")
                        .HasConstraintName("Miejscowosc")
                        .IsRequired();

                    b.Navigation("MiejscowoscZagrozonaNavigation");
                });

            modelBuilder.Entity("Projekt.Models.PowiadomienieSm", b =>
                {
                    b.HasOne("Projekt.Models.ObszarZagrozony", "MiejscowoscNavigation")
                        .WithMany("PowiadomienieSms")
                        .HasForeignKey("Miejscowosc")
                        .HasConstraintName("Miejscowosc2")
                        .IsRequired();

                    b.Navigation("MiejscowoscNavigation");
                });

            modelBuilder.Entity("Projekt.Models.RodzajSłużbyRatunkowej", b =>
                {
                    b.HasOne("Projekt.Models.ObszarZagrozony", "MiejscowośćNavigation")
                        .WithMany()
                        .HasForeignKey("Miejscowość")
                        .HasConstraintName("Miejscowosce")
                        .IsRequired();

                    b.Navigation("MiejscowośćNavigation");
                });

            modelBuilder.Entity("Projekt.Models.ImgwdaneSynoptyczne", b =>
                {
                    b.Navigation("DataPomiaruZstacjis");
                });

            modelBuilder.Entity("Projekt.Models.ObszarZagrozony", b =>
                {
                    b.Navigation("PowiadomienieSms");
                });

            modelBuilder.Entity("Projekt.Models.PomiarRzeki", b =>
                {
                    b.Navigation("DataPomiarus");

                    b.Navigation("ObszarZagrozonies");
                });

            modelBuilder.Entity("Projekt.Models.PowodzieHistoryczne", b =>
                {
                    b.Navigation("DataPowodziHis");
                });

            modelBuilder.Entity("Projekt.Models.PrognozaPogody", b =>
                {
                    b.Navigation("DataPrognozies");
                });
#pragma warning restore 612, 618
        }
    }
}
